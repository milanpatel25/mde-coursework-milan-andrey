/*
 * generated by Xtext 2.24.0
 */
package mde.coursework.gherkin.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mde.coursework.gherkin.ide.contentassist.antlr.internal.InternalGherkinParser;
import mde.coursework.gherkin.services.GherkinGrammarAccess;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GherkinParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GherkinGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GherkinGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGherkin_LanguageAccess().getAlternatives(), "rule__Gherkin_Language__Alternatives");
			builder.put(grammarAccess.getScenarioAccess().getAlternatives(), "rule__Scenario__Alternatives");
			builder.put(grammarAccess.getStepsAccess().getAlternatives(), "rule__Steps__Alternatives");
			builder.put(grammarAccess.getSentenceAccess().getAlternatives(), "rule__Sentence__Alternatives");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup_2(), "rule__Feature__Group_2__0");
			builder.put(grammarAccess.getBackgroundAccess().getGroup(), "rule__Background__Group__0");
			builder.put(grammarAccess.getBackgroundAccess().getGroup_1(), "rule__Background__Group_1__0");
			builder.put(grammarAccess.getNormal_ScenarioAccess().getGroup(), "rule__Normal_Scenario__Group__0");
			builder.put(grammarAccess.getScenario_OutlineAccess().getGroup(), "rule__Scenario_Outline__Group__0");
			builder.put(grammarAccess.getScenario_OutlineAccess().getGroup_2(), "rule__Scenario_Outline__Group_2__0");
			builder.put(grammarAccess.getExamplesAccess().getGroup(), "rule__Examples__Group__0");
			builder.put(grammarAccess.getExamplesAccess().getGroup_2(), "rule__Examples__Group_2__0");
			builder.put(grammarAccess.getExamples_rowAccess().getGroup(), "rule__Examples_row__Group__0");
			builder.put(grammarAccess.getExamples_rowAccess().getGroup_0(), "rule__Examples_row__Group_0__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_2(), "rule__Rule__Group_2__0");
			builder.put(grammarAccess.getExampleAccess().getGroup(), "rule__Example__Group__0");
			builder.put(grammarAccess.getChain_StepsAccess().getGroup(), "rule__Chain_Steps__Group__0");
			builder.put(grammarAccess.getChain_StepsAccess().getGroup_1(), "rule__Chain_Steps__Group_1__0");
			builder.put(grammarAccess.getGiven_StatementAccess().getGroup(), "rule__Given_Statement__Group__0");
			builder.put(grammarAccess.getWhen_StatementAccess().getGroup(), "rule__When_Statement__Group__0");
			builder.put(grammarAccess.getThen_StatementAccess().getGroup(), "rule__Then_Statement__Group__0");
			builder.put(grammarAccess.getBut_StatementAccess().getGroup(), "rule__But_Statement__Group__0");
			builder.put(grammarAccess.getAnd_StatementAccess().getGroup(), "rule__And_Statement__Group__0");
			builder.put(grammarAccess.getStar_StatementAccess().getGroup(), "rule__Star_Statement__Group__0");
			builder.put(grammarAccess.getDescriptionAccess().getGroup(), "rule__Description__Group__0");
			builder.put(grammarAccess.getSentAccess().getGroup(), "rule__Sent__Group__0");
			builder.put(grammarAccess.getGherkin_LanguageAccess().getFeaturesAssignment_0(), "rule__Gherkin_Language__FeaturesAssignment_0");
			builder.put(grammarAccess.getGherkin_LanguageAccess().getRulesAssignment_1(), "rule__Gherkin_Language__RulesAssignment_1");
			builder.put(grammarAccess.getFeatureAccess().getFeature_backgroundAssignment_2_1(), "rule__Feature__Feature_backgroundAssignment_2_1");
			builder.put(grammarAccess.getFeatureAccess().getScenariosAssignment_2_2(), "rule__Feature__ScenariosAssignment_2_2");
			builder.put(grammarAccess.getBackgroundAccess().getTitleAssignment_0(), "rule__Background__TitleAssignment_0");
			builder.put(grammarAccess.getBackgroundAccess().getBackground_StepsAssignment_1_1(), "rule__Background__Background_StepsAssignment_1_1");
			builder.put(grammarAccess.getNormal_ScenarioAccess().getScenario_stepsAssignment_2(), "rule__Normal_Scenario__Scenario_stepsAssignment_2");
			builder.put(grammarAccess.getScenario_OutlineAccess().getStepsAssignment_2_1(), "rule__Scenario_Outline__StepsAssignment_2_1");
			builder.put(grammarAccess.getScenario_OutlineAccess().getExampleAssignment_2_2(), "rule__Scenario_Outline__ExampleAssignment_2_2");
			builder.put(grammarAccess.getExamplesAccess().getRowsAssignment_2_1(), "rule__Examples__RowsAssignment_2_1");
			builder.put(grammarAccess.getRuleAccess().getBackgroundAssignment_2_1(), "rule__Rule__BackgroundAssignment_2_1");
			builder.put(grammarAccess.getRuleAccess().getExamplesAssignment_2_2(), "rule__Rule__ExamplesAssignment_2_2");
			builder.put(grammarAccess.getExampleAccess().getExample_stepsAssignment_2(), "rule__Example__Example_stepsAssignment_2");
			builder.put(grammarAccess.getChain_StepsAccess().getChainAssignment_1_1(), "rule__Chain_Steps__ChainAssignment_1_1");
			builder.put(grammarAccess.getStepsAccess().getGiven_stepAssignment_0(), "rule__Steps__Given_stepAssignment_0");
			builder.put(grammarAccess.getStepsAccess().getWhen_stepAssignment_1(), "rule__Steps__When_stepAssignment_1");
			builder.put(grammarAccess.getStepsAccess().getBut_stepAssignment_2(), "rule__Steps__But_stepAssignment_2");
			builder.put(grammarAccess.getStepsAccess().getThen_stepAssignment_3(), "rule__Steps__Then_stepAssignment_3");
			builder.put(grammarAccess.getStepsAccess().getAnd_stepAssignment_4(), "rule__Steps__And_stepAssignment_4");
			builder.put(grammarAccess.getStepsAccess().getStar_stepAssignment_5(), "rule__Steps__Star_stepAssignment_5");
			builder.put(grammarAccess.getGiven_StatementAccess().getDescAssignment_1(), "rule__Given_Statement__DescAssignment_1");
			builder.put(grammarAccess.getWhen_StatementAccess().getDescAssignment_1(), "rule__When_Statement__DescAssignment_1");
			builder.put(grammarAccess.getThen_StatementAccess().getDescAssignment_1(), "rule__Then_Statement__DescAssignment_1");
			builder.put(grammarAccess.getBut_StatementAccess().getDescAssignment_1(), "rule__But_Statement__DescAssignment_1");
			builder.put(grammarAccess.getAnd_StatementAccess().getDescAssignment_1(), "rule__And_Statement__DescAssignment_1");
			builder.put(grammarAccess.getStar_StatementAccess().getDescAssignment_1(), "rule__Star_Statement__DescAssignment_1");
			builder.put(grammarAccess.getDescriptionAccess().getDescAssignment_1(), "rule__Description__DescAssignment_1");
			builder.put(grammarAccess.getSentAccess().getDescAssignment_1(), "rule__Sent__DescAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GherkinGrammarAccess grammarAccess;

	@Override
	protected InternalGherkinParser createParser() {
		InternalGherkinParser result = new InternalGherkinParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new GherkinTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GherkinGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GherkinGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
