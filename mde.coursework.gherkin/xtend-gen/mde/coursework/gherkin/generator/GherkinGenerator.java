/**
 * generated by Xtext 2.24.0
 */
package mde.coursework.gherkin.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.Iterator;
import mde.coursework.gherkin.gherkin.And_Statement;
import mde.coursework.gherkin.gherkin.But_Statement;
import mde.coursework.gherkin.gherkin.Gherkin_Language;
import mde.coursework.gherkin.gherkin.Given_Statement;
import mde.coursework.gherkin.gherkin.Star_Statement;
import mde.coursework.gherkin.gherkin.Then_Statement;
import mde.coursework.gherkin.gherkin.When_Statement;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GherkinGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Gherkin_Language model = ((Gherkin_Language) _head);
    fsa.generateFile(("StepDefinitions" + ".java"), this.generateStepDefinitions(model));
  }
  
  public CharSequence generateStepDefinitions(final Gherkin_Language gherkin) {
    StringConcatenation _builder = new StringConcatenation();
    final Iterator<Given_Statement> givens = Iterators.<Given_Statement>filter(gherkin.eAllContents(), Given_Statement.class);
    _builder.newLineIfNotEmpty();
    final Iterator<When_Statement> whens = Iterators.<When_Statement>filter(gherkin.eAllContents(), When_Statement.class);
    _builder.newLineIfNotEmpty();
    final Iterator<Then_Statement> thens = Iterators.<Then_Statement>filter(gherkin.eAllContents(), Then_Statement.class);
    _builder.newLineIfNotEmpty();
    final Iterator<But_Statement> buts = Iterators.<But_Statement>filter(gherkin.eAllContents(), But_Statement.class);
    _builder.newLineIfNotEmpty();
    final Iterator<Star_Statement> stars = Iterators.<Star_Statement>filter(gherkin.eAllContents(), Star_Statement.class);
    _builder.newLineIfNotEmpty();
    final Iterator<And_Statement> ands = Iterators.<And_Statement>filter(gherkin.eAllContents(), And_Statement.class);
    _builder.append("\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("public class StepDefinitions {");
    _builder.newLine();
    _builder.append("\t");
    final Function1<Given_Statement, String> _function = (Given_Statement it) -> {
      return this.generateStep(it);
    };
    String _join = IteratorExtensions.join(IteratorExtensions.<Given_Statement, String>map(givens, _function), "\n");
    _builder.append(_join, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    final Function1<When_Statement, String> _function_1 = (When_Statement it) -> {
      return this.generateStep(it);
    };
    String _join_1 = IteratorExtensions.join(IteratorExtensions.<When_Statement, String>map(whens, _function_1), "\n");
    _builder.append(_join_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    final Function1<Then_Statement, String> _function_2 = (Then_Statement it) -> {
      return this.generateStep(it);
    };
    String _join_2 = IteratorExtensions.join(IteratorExtensions.<Then_Statement, String>map(thens, _function_2), "\n");
    _builder.append(_join_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    final Function1<But_Statement, String> _function_3 = (But_Statement it) -> {
      return this.generateStep(it);
    };
    String _join_3 = IteratorExtensions.join(IteratorExtensions.<But_Statement, String>map(buts, _function_3), "\n");
    _builder.append(_join_3, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    final Function1<Star_Statement, String> _function_4 = (Star_Statement it) -> {
      return this.generateStep(it);
    };
    String _join_4 = IteratorExtensions.join(IteratorExtensions.<Star_Statement, String>map(stars, _function_4), "\n");
    _builder.append(_join_4, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    final Function1<And_Statement, String> _function_5 = (And_Statement it) -> {
      return this.generateStep(it);
    };
    String _join_5 = IteratorExtensions.join(IteratorExtensions.<And_Statement, String>map(ands, _function_5), "\n");
    _builder.append(_join_5, "\t");
    _builder.append("\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected String _generateStep(final Given_Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Given(");
    String _returnName = this.returnName(stmt.getDesc().getDesc(), " ");
    String _plus = ("\"" + _returnName);
    String _plus_1 = (_plus + "\"");
    _builder.append(_plus_1);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("public void ");
    String _returnName_1 = this.returnName(stmt.getDesc().getDesc(), "_");
    _builder.append(_returnName_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        \t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateStep(final When_Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@When(");
    String _returnName = this.returnName(stmt.getDesc().getDesc(), " ");
    String _plus = ("\"" + _returnName);
    String _plus_1 = (_plus + "\"");
    _builder.append(_plus_1);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("public void ");
    String _returnName_1 = this.returnName(stmt.getDesc().getDesc(), "_");
    _builder.append(_returnName_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        \t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateStep(final Then_Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Then(");
    String _returnName = this.returnName(stmt.getDesc().getDesc(), " ");
    String _plus = ("\"" + _returnName);
    String _plus_1 = (_plus + "\"");
    _builder.append(_plus_1);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("public void ");
    String _returnName_1 = this.returnName(stmt.getDesc().getDesc(), "_");
    _builder.append(_returnName_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        \t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateStep(final But_Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@But(");
    String _returnName = this.returnName(stmt.getDesc().getDesc(), " ");
    String _plus = ("\"" + _returnName);
    String _plus_1 = (_plus + "\"");
    _builder.append(_plus_1);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("public void ");
    String _returnName_1 = this.returnName(stmt.getDesc().getDesc(), "_");
    _builder.append(_returnName_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        \t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateStep(final Star_Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Star(");
    String _returnName = this.returnName(stmt.getDesc().getDesc(), " ");
    String _plus = ("\"" + _returnName);
    String _plus_1 = (_plus + "\"");
    _builder.append(_plus_1);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("public void ");
    String _returnName_1 = this.returnName(stmt.getDesc().getDesc(), "_");
    _builder.append(_returnName_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        \t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateStep(final And_Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("@And(");
    String _returnName = this.returnName(stmt.getDesc().getDesc(), " ");
    String _plus = ("\"" + _returnName);
    String _plus_1 = (_plus + "\"");
    _builder.append(_plus_1);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("public void ");
    String _returnName_1 = this.returnName(stmt.getDesc().getDesc(), "_");
    _builder.append(_returnName_1);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        \t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String returnName(final EList<String> desc, final String connection) {
    String name = "";
    for (final String string : desc) {
      int _indexOf = desc.indexOf(string);
      int _length = ((Object[])Conversions.unwrapArray(desc, Object.class)).length;
      int _minus = (_length - 1);
      boolean _equals = (_indexOf == _minus);
      if (_equals) {
        String _name = name;
        name = (_name + string);
      } else {
        String _name_1 = name;
        name = (_name_1 + (string + connection));
      }
    }
    return name;
  }
  
  public String generateStep(final EObject stmt) {
    if (stmt instanceof And_Statement) {
      return _generateStep((And_Statement)stmt);
    } else if (stmt instanceof But_Statement) {
      return _generateStep((But_Statement)stmt);
    } else if (stmt instanceof Given_Statement) {
      return _generateStep((Given_Statement)stmt);
    } else if (stmt instanceof Star_Statement) {
      return _generateStep((Star_Statement)stmt);
    } else if (stmt instanceof Then_Statement) {
      return _generateStep((Then_Statement)stmt);
    } else if (stmt instanceof When_Statement) {
      return _generateStep((When_Statement)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
}
